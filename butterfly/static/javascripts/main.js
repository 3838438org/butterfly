// Generated by CoffeeScript 1.6.3
var $, alt, bench, cbench, cols, ctrl, e, first, quit, resize, rows, state, term, virtual_input, ws, ws_url;

term = ws = null;

cols = rows = null;

quit = false;

$ = document.querySelectorAll.bind(document);

ws_url = 'ws://' + document.location.host + '/ws' + location.pathname;

ws = new WebSocket(ws_url);

ws.onopen = function() {
  console.log("WebSocket open", arguments);
  term = new Terminal({
    visualBell: 100,
    screenKeys: true,
    scrollback: 100000
  });
  term.on("data", function(data) {
    return ws.send('SH|' + data);
  });
  term.on("title", function(title) {
    return document.title = title;
  });
  term.open($('main')[0]);
  $('.terminal')[0].style = '';
  return resize();
};

ws.onerror = function() {
  return console.log("WebSocket error", arguments);
};

ws.onmessage = function(e) {
  return term.write(e.data);
};

ws.onclose = function() {
  if (term) {
    term.destroy();
  }
  console.log("WebSocket closed", arguments);
  quit = true;
  return open('', '_self').close();
};

addEventListener('beforeunload', function() {
  if (!quit) {
    return 'This will exit the terminal session';
  }
});

addEventListener('resize', resize = function() {
  var div, eh, ew, fake_term, fake_term_div, fake_term_line, main, main_bb, _i, _len, _ref;
  main = $('main')[0];
  fake_term = document.createElement('div');
  fake_term.className = 'terminal test';
  fake_term_div = document.createElement('div');
  fake_term_line = document.createElement('span');
  fake_term_line.textContent = '0123456789';
  fake_term_div.appendChild(fake_term_line);
  fake_term.appendChild(fake_term_div);
  main.appendChild(fake_term);
  ew = fake_term_line.getBoundingClientRect().width;
  eh = fake_term_div.getBoundingClientRect().height;
  main.removeChild(fake_term);
  main_bb = main.getBoundingClientRect();
  cols = Math.floor(10 * main_bb.width / ew) - 1;
  rows = Math.floor(main_bb.height / eh);
  console.log("Computed " + cols + " cols and " + rows + " rows from ", main_bb, ew, eh);
  term.resize(cols, rows);
  _ref = $('.terminal div');
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    div = _ref[_i];
    div.style.height = eh + 'px';
  }
  return ws.send("RS|" + cols + "," + rows);
});

bench = function(n) {
  var rnd, t0;
  if (n == null) {
    n = 100000000;
  }
  rnd = '';
  while (rnd.length < n) {
    rnd += Math.random().toString(36).substring(2);
  }
  t0 = (new Date()).getTime();
  term.write(rnd);
  return console.log("" + n + " chars in " + ((new Date()).getTime() - t0) + " ms");
};

cbench = function(n) {
  var rnd, t0;
  if (n == null) {
    n = 100000000;
  }
  rnd = '';
  while (rnd.length < n) {
    rnd += "\x1b[" + (30 + parseInt(Math.random() * 20)) + "m";
    rnd += Math.random().toString(36).substring(2);
  }
  t0 = (new Date()).getTime();
  term.write(rnd);
  return console.log("" + n + " chars + colors in " + ((new Date()).getTime() - t0) + " ms");
};

try {
  document.createEvent("TouchEvent");
  virtual_input = true;
} catch (_error) {
  e = _error;
  virtual_input = false;
}

if (virtual_input) {
  ctrl = false;
  alt = false;
  first = true;
  virtual_input = document.createElement('input');
  virtual_input.type = 'password';
  virtual_input.style.position = 'fixed';
  virtual_input.style.top = 0;
  virtual_input.style.left = 0;
  virtual_input.style.border = 'none';
  virtual_input.style.outline = 'none';
  virtual_input.style.opacity = 0;
  virtual_input.value = '0';
  document.body.appendChild(virtual_input);
  virtual_input.addEventListener('blur', function() {
    var _this = this;
    return setTimeout((function() {
      return _this.focus();
    }), 10);
  });
  addEventListener('click', function() {
    return virtual_input.focus();
  });
  addEventListener('touchstart', function(e) {
    if (e.touches.length === 1) {
      return ctrl = true;
    } else if (e.touches.length === 2) {
      ctrl = false;
      return alt = true;
    } else if (e.touches.length === 3) {
      ctrl = true;
      return alt = true;
    }
  });
  virtual_input.addEventListener('keydown', function(e) {
    term.keyDown(e);
    return true;
  });
  virtual_input.addEventListener('input', function(e) {
    var len;
    len = this.value.length;
    if (len === 0) {
      e.keyCode = 8;
      term.keyDown(e);
      this.value = '0';
      return true;
    }
    e.keyCode = this.value.charAt(1).charCodeAt(0);
    if ((ctrl || alt) && !first) {
      e.keyCode = this.value.charAt(1).charCodeAt(0);
      e.ctrlKey = ctrl;
      e.altKey = alt;
      if (e.keyCode >= 97 && e.keyCode <= 122) {
        e.keyCode -= 32;
      }
      term.keyDown(e);
      this.value = '0';
      ctrl = alt = false;
      return true;
    }
    term.keyPress(e);
    first = false;
    this.value = '0';
    return true;
  });
}

state = {
  x: null,
  y: null
};

document.addEventListener('keydown', function(e) {
  var _ref;
  if (e.shiftKey && ((37 <= (_ref = e.keyCode) && _ref <= 40))) {
    if (state.y === null) {
      state.y = term.ybase + term.y;
    }
    if (e.keyCode === 38) {
      state.y--;
      if (state.y < term.ybase) {
        state.y = term.ybase;
      }
    } else if (e.keyCode === 40) {
      state.y++;
      if (state.y > term.ybase + term.y) {
        state.y = term.ybase + term.y;
      }
    }
    term.emit('data', ' \x0b\x15');
    if (state.y !== term.ybase + term.y) {
      term.emit('data', term.grabText(0, term.cols - 1, state.y, state.y).replace('\n', ''));
    }
    e.stopPropagation();
    return false;
  } else {
    return state.x = state.y = null;
  }
});
